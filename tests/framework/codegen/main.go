package main

import (
	"bytes"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/Masterminds/sprig/v3"
	"github.com/rancher/wrangler/pkg/controller-gen/args"
	"github.com/sirupsen/logrus"
)

func main() {
	_ = os.Unsetenv("GOPATH")
	//generator.GenerateClient(managementSchema.Schemas, map[string]bool{
	//	"userAttribute": true,
	//})
	//
	//if err := replaceClientBasePackages(); err != nil {
	//	panic(err)
	//}

	if err := generateSteveClients(); err != nil {
		panic(err)
	}
}

type context struct {
	PackageVersion string
	PackageSource  string
	Names          []string
}

type input struct {
	pkg    string
	source []any
}

// generateSteveClients is a generating function specifically designed to cobble together a wrangler-compliant version
// of steve that utilizes steve for CRUD, and wrangler (aka k8s) for specific actions such as watch events. The entire
// purpose of this generation is to cut down on lines of code to make equivalent steve calls, and was chosen as the
// least intrusive option, as a means to avoid updating lasso or wrangler directly.
func generateSteveClients() error {
	rootDir := "../clients/steve/generated/"
	err := os.MkdirAll(rootDir, 0755)
	if err != nil {
		return err
	}

	inputs := []input{
		{
			pkg: "../../../pkg/apis/provisioning.cattle.io/v1",
		},
		{
			pkg: "../../../pkg/apis/rke.cattle.io/v1",
		},
		{
			pkg: "../../../pkg/apis/management.cattle.io/v3",
		},
	}
	var contexts []context

	for _, i := range inputs {
		if len(i.source) == 0 {
			types, err := args.ScanDirectory(i.pkg)
			if err != nil {
				return err
			}
			logrus.Infof("%v", types)
			var c context
			for _, t := range types {
				if c.PackageSource == "" {
					source := strings.Split(t.Package, "/")
					c.PackageSource = source[len(source)-2]
				}
				if c.PackageVersion == "" {
					c.PackageVersion = t.Version
				}
				c.Names = append(c.Names, t.Name)
			}

			contexts = append(contexts, c)
		} else {
			for _, s := range i.source {
				if s == nil {
					panic("not implemented")
				}
			}
		}
	}

	for _, c := range contexts {
		templateFuncMap := sprig.TxtFuncMap()
		t := template.Must(template.New("clients").Funcs(templateFuncMap).Parse(templateSource))

		buf := bytes.Buffer{}
		err = t.Execute(&buf, &c)
		if err != nil {
			return err
		}
		d := rootDir + c.PackageSource + "/" + c.PackageVersion
		err = os.MkdirAll(d, 0755)
		if err != nil {
			return err
		}
		err = os.WriteFile(d+"/interface.go", buf.Bytes(), 0644)
		if err != nil {
			return err
		}
	}

	return nil
}

// replaceClientBasePackages walks through the zz_generated_client generated by generator.GenerateClient to replace imports from
// "github.com/rancher/norman/clientbase" to "github.com/rancher/rancher/tests/framework/pkg/clientbase" to use our modified code of the
// session.Session tracking the resources created by the Management Steve.
func replaceClientBasePackages() error {
	return filepath.Walk("./clients/rancher/generated", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if strings.HasPrefix(info.Name(), "zz_generated_client") {
			input, err := os.ReadFile(path)
			if err != nil {
				return err
			}

			replacement := bytes.Replace(input, []byte("github.com/rancher/norman/clientbase"), []byte("github.com/rancher/rancher/tests/framework/pkg/clientbase"), -1)

			if err = os.WriteFile(path, replacement, 0666); err != nil {
				return err
			}
		}

		return nil
	})
}
